Day-5 of gfg160  (Leetcode 31)

Problem: Find the next permutation of the given array 

permutation mean suffling of array
next permutation means-- just next lexicographically greater array

input: 1 2 3 
output: 1 3 2

Approach or algo: 
- Traverse the array from right to left and find a index let's called gola_index that follow the nums[i]>nums[i-1]. so gola_index will be i-1
- after find gola_index find the swap_index that is right side of gola_index and it is just greater than the gola_index
- now swap the both gola_index and swap_index
- after swapping gola element is at it's right position 
- now reverse the entire element of right side of gola element 
- after its all we got out next permutation array 

The replacement is in place and use only constant extra memory so 
SC: O(1)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CODE:

class Solution {
  public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        
        //first find the blue gola index
        int gola_index = -1;
        
        for(int i = n-1; i>0; i--){
            if(nums[i]>nums[i-1]){
                gola_index = i-1;
                break;
            }
        }
        
        if(gola_index != -1){
            int swap_index = gola_index;
            
            for(int j = n-1; j>= gola_index+1; j--){
                if(nums[j] > nums[gola_index]){
                    swap_index = j;
                    break;
                }
            }
            
            swap(nums[gola_index], nums[swap_index]);
        }
        
        reverse(nums.begin() + gola_index+1, nums.end());
    }
};

