Day-6 of GFG160 

Problem: Find the majority Element 2 

this problem is similar to the majority element 1 : in this problem there is only one element that appears more than the [n/2] where n is size of array

similarly, in majority element 2, there will be 2 element that can appear in the more than the [n/3] of n size array

Appraoch : 
the approach is very simple,
maj1 = NULL;
count1 = 0;

maj2 = NULL;
count2 = 0;

then check, if (nums[i] == maj1) count1++;

else if(nums[i] == maj2) count2++;

else if(count1 == 0) {
maj1 = nums[i]
count1 = 1;
}

else if(count2 == 0) {
maj2 = nums[i]
count2 = 1;
}

else count1--; count2--;

after that verify you result. that's it...............................................................................................

Code: 

class Solution {
  public:
    // Function to find the majority elements in the array
    vector<int> findMajority(vector<int>& nums) {
        int n = nums.size();
        
        int maj1 = NULL;
        int count1 = 0;
        
        int maj2 = NULL;
        int count2 = 0;
        
        int freq = floor(n/3);
        
        for(int i = 0; i<n; i++){
            if(nums[i] == maj1) 
            count1++;
            else if(nums[i] == maj2) 
            count2++;
            else if(count1 == 0) {
                maj1 = nums[i];
                count1 = 1;
            } else if(count2 == 0) {
                maj2 = nums[i];
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        
        vector<int> result; // for varification because almost two elements can occur more than n/3 in an array of length n 
        count1 = 0;
        count2 = 0;
        
        for(int num : nums) {
            if(num == maj1) 
            count1++;
            else if(num == maj2) 
            count2++;
        }
        
        if(count1>floor(n/3))
        result.push_back(maj1);
        
        if(count2>floor(n/3))
        result.push_back(maj2);
        
        sort(result.begin(), result.end());
        
        return result;
    }
};

